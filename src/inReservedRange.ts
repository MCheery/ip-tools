import { IPType, getIPType } from "./isValidIP"
import { ipv4ToLong, ipv6ToLong } from "./toLong"

export enum RESERVED_IPV4_TYPE {
  NONE = 0,
  THIS_NETWORK,
  THIS_HOST_ON_THIS_NETWORK,
  LOOP_BACK,
  LINK_LOCAL,
  PRIVATE_USE,
  PRIVATE_USE_2,
  PRIVATE_USE_3,
  SHARED_ADDRESS_SPACE,
  IETF_PROTOCOL_ASSIGNMENTS,
  IPV4_SERVICE_CONTINUITY_PREFIX,
  IPV4_DUMMY_ADDRESS,
  PORT_CONTROL_PROTOCOL_ANYCAST,
  TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST,
  NAT64_DNS64_DISCOVERY,
  AS112_V4,
  AMT,
  DIRECT_DELEGATION_AS112_SERVICE,
  BENCHMARKING,
  DOCUMENTATION_TEST_NET_1,
  DOCUMENTATION_TEST_NET_2,
  DOCUMENTATION_TEST_NET_3,
  RESERVED,
  LIMITED_BROADCAST,
}

// Token from: https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml
const IPV4_RESERVED_RANGES: Array<[number, number, RESERVED_IPV4_TYPE]> = [
  // 0.0.0.0/32
  [0x00000000, 0xffffffff, RESERVED_IPV4_TYPE.THIS_HOST_ON_THIS_NETWORK],
  // 255.255.255.255/32
  [0xffffffff, 0xffffffff, RESERVED_IPV4_TYPE.LIMITED_BROADCAST],
  // 192.0.0.8/32
  [0xc0000008, 0xffffffff, RESERVED_IPV4_TYPE.IPV4_DUMMY_ADDRESS],
  // 192.0.0.9/32
  [0xc0000009, 0xffffffff, RESERVED_IPV4_TYPE.PORT_CONTROL_PROTOCOL_ANYCAST],
  // 192.0.0.10/32
  [0xc000000a, 0xffffffff, RESERVED_IPV4_TYPE.TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST],
  // 192.0.0.170/32
  [0xc00000aa, 0xffffffff, RESERVED_IPV4_TYPE.NAT64_DNS64_DISCOVERY],
  // 192.0.0.171/32
  [0xc00000ab, 0xffffffff, RESERVED_IPV4_TYPE.NAT64_DNS64_DISCOVERY],
  // 192.0.0.0/29
  [0xc0000000, 0xfffffff8, RESERVED_IPV4_TYPE.IPV4_SERVICE_CONTINUITY_PREFIX],
  // 192.0.0.0/24
  [0xc0000000, 0xffffff00, RESERVED_IPV4_TYPE.IETF_PROTOCOL_ASSIGNMENTS],
  // 192.0.2.0/24
  [0xc0000200, 0xffffff00, RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_1],
  // 192.31.196.0/24
  [0xc01fc400, 0xffffff00, RESERVED_IPV4_TYPE.AS112_V4],
  // 192.52.193.0/24
  [0xc034c100, 0xffffff00, RESERVED_IPV4_TYPE.AMT],
  // 192.175.48.0/24
  [0xc0af3000, 0xffffff00, RESERVED_IPV4_TYPE.DIRECT_DELEGATION_AS112_SERVICE],
  // 198.51.100.0/24
  [0xc6336400, 0xffffff00, RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_2],
  // 203.0.113.0/24
  [0xcb007100, 0xffffff00, RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_3],
  // 192.168.0.0/16
  [0xc0a80000, 0xffff0000, RESERVED_IPV4_TYPE.PRIVATE_USE_3],
  // 169.254.0.0/16
  [0xa9fe0000, 0xffff0000, RESERVED_IPV4_TYPE.LINK_LOCAL],
  // 198.18.0.0/15
  [0xc6120000, 0xffff8000, RESERVED_IPV4_TYPE.BENCHMARKING],
  // 172.16.0.0/12
  [0xac100000, 0xfff00000, RESERVED_IPV4_TYPE.PRIVATE_USE_2],
  // 100.64.0.0/10
  [0x64400000, 0xffc00000, RESERVED_IPV4_TYPE.SHARED_ADDRESS_SPACE],
  // 0.0.0.0/8
  [0x00000000, 0xff000000, RESERVED_IPV4_TYPE.THIS_NETWORK],
  // 10.0.0.0/8
  [0x0a000000, 0xff000000, RESERVED_IPV4_TYPE.PRIVATE_USE],
  // 127.0.0.0/8
  [0x7f000000, 0xff000000, RESERVED_IPV4_TYPE.LOOP_BACK],
  // 240.0.0.0/4
  [0xf0000000, 0xf0000000, RESERVED_IPV4_TYPE.RESERVED],
]

export enum RESERVED_IPV6_TYPE {
  NONE = 0,
  LOOPBACK_ADDRESS,
  UNSPECIFIED_ADDRESS,
  IPV4_MAPPED_ADDRESS,
  IPV4_IPV6_TRANSLAT,
  DISCARD_ONLY_ADDRESS_BLOCK,
  IEFE_PROTOCOL_ASSIGNMENTS,
  TEREDO,
  PORT_CONTROL_PROTOCOL_ANYCAST,
  TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST,
  BENCHMARKING,
  AMT,
  AS112_V6,
  ORCHID_V2,
  DETS_PREFIX,
  DOCUMENTATION,
  IPV6_TO_IPV4,
  DIRECT_DELEGATION_AS112_SERVICE,
  UNIQUE_LOCAL,
  LINK_LOCAL_UNICAST,
}

// Token from: https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml
const IPV6_RESERVED_RANGES: Array<[bigint, bigint, RESERVED_IPV6_TYPE]> = [
  // 2001:1::1/128
  [BigInt('0x20010001000000000000000000000001'), BigInt('0xffffffffffffffffffffffffffffffff'), RESERVED_IPV6_TYPE.PORT_CONTROL_PROTOCOL_ANYCAST],
  // 2001:1::2/128
  [BigInt('0x20010001000000000000000000000002'), BigInt('0xffffffffffffffffffffffffffffffff'), RESERVED_IPV6_TYPE.TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST],
  // ::1/128
  [BigInt('0x00000000000000000000000000000001'), BigInt('0xffffffffffffffffffffffffffffffff'), RESERVED_IPV6_TYPE.LOOPBACK_ADDRESS],
  // ::/128
  [BigInt('0x00000000000000000000000000000000'), BigInt('0xffffffffffffffffffffffffffffffff'), RESERVED_IPV6_TYPE.UNSPECIFIED_ADDRESS],
  // ::ffff:0:0/96
  [BigInt('0x00000000000000000000ffff00000000'), BigInt('0xffffffffffffffffffffffff00000000'), RESERVED_IPV6_TYPE.IPV4_MAPPED_ADDRESS],
  // 64:ff9b::/96
  [BigInt('0x0064ff9b000000000000000000000000'), BigInt('0xffffffffffffffffffffffff00000000'), RESERVED_IPV6_TYPE.IPV4_IPV6_TRANSLAT],
  // 100::/64
  [BigInt('0x01000000000000000000000000000000'), BigInt('0xffffffffffffffff0000000000000000'), RESERVED_IPV6_TYPE.DISCARD_ONLY_ADDRESS_BLOCK],
  // 64:ff9b:1::/48
  [BigInt('0x0064ff9b000100000000000000000000'), BigInt('0xffffffffffff00000000000000000000'), RESERVED_IPV6_TYPE.IPV4_IPV6_TRANSLAT],
  // 2001:2::/48
  [BigInt('0x20010002000000000000000000000000'), BigInt('0xffffffffffff00000000000000000000'), RESERVED_IPV6_TYPE.BENCHMARKING],
  // 2001:4:112::/48
  [BigInt('0x20010004011200000000000000000000'), BigInt('0xffffffffffff00000000000000000000'), RESERVED_IPV6_TYPE.AS112_V6],
  // 2620:4f:8000::/48
  [BigInt('0x2620004f800000000000000000000000'), BigInt('0xffffffffffff00000000000000000000'), RESERVED_IPV6_TYPE.DIRECT_DELEGATION_AS112_SERVICE],
  // 2001::/32
  [BigInt('0x20010000000000000000000000000000'), BigInt('0xffffffff000000000000000000000000'), RESERVED_IPV6_TYPE.TEREDO],
  // 2001:3::/32
  [BigInt('0x20010003000000000000000000000000'), BigInt('0xffffffff000000000000000000000000'), RESERVED_IPV6_TYPE.AMT],
  // 2001:db8::/32
  [BigInt('0x20010db8000000000000000000000000'), BigInt('0xffffffff000000000000000000000000'), RESERVED_IPV6_TYPE.DOCUMENTATION],
  // 2001:20::/28
  [BigInt('0x20010020000000000000000000000000'), BigInt('0xfffffff0000000000000000000000000'), RESERVED_IPV6_TYPE.ORCHID_V2],
  // 2001:30::/28
  [BigInt('0x20010030000000000000000000000000'), BigInt('0xfffffff0000000000000000000000000'), RESERVED_IPV6_TYPE.DETS_PREFIX],
  // 2001::/23
  [BigInt('0x20010000000000000000000000000000'), BigInt('0xfffffe00000000000000000000000000'), RESERVED_IPV6_TYPE.IEFE_PROTOCOL_ASSIGNMENTS],
  // 2002::/16
  [BigInt('0x20020000000000000000000000000000'), BigInt('0xffff0000000000000000000000000000'), RESERVED_IPV6_TYPE.IPV6_TO_IPV4],
  // fe80::/10
  [BigInt('0xfe800000000000000000000000000000'), BigInt('0xffc00000000000000000000000000000'), RESERVED_IPV6_TYPE.LINK_LOCAL_UNICAST],
  // fc00::/7
  [BigInt('0xfc000000000000000000000000000000'), BigInt('0xfe000000000000000000000000000000'), RESERVED_IPV6_TYPE.UNIQUE_LOCAL],
]

export function ipv4InReservedRange(addressv4: string): RESERVED_IPV4_TYPE {
  const ip = ipv4ToLong(addressv4)
  for (const [target, mask, type] of IPV4_RESERVED_RANGES) {
    if ((target ^ (ip & mask)) === 0) {
      return type
    }
  }
  return RESERVED_IPV4_TYPE.NONE
}

export function ipv6InReservedRange(addressv6: string): RESERVED_IPV6_TYPE {
  const ip = ipv6ToLong(addressv6)
  const zero = BigInt(0)
  for (const [target, mask, type] of IPV6_RESERVED_RANGES) {
    if ((target ^ (ip & mask)) === zero) {
      return type
    }
  }
  return RESERVED_IPV6_TYPE.NONE
}

export function ipInReservedRange(address: string): boolean {
  const type = getIPType(address)
  if (type === IPType.ipv4) {
    return ipv4InReservedRange(address) === RESERVED_IPV4_TYPE.NONE
  }
  if (type === IPType.ipv6) {
    return ipv6InReservedRange(address) === RESERVED_IPV6_TYPE.NONE
  }
  return false
}