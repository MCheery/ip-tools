import { describe } from 'vitest'
import { ipv4InReservedRange, ipv6InReservedRange, RESERVED_IPV4_TYPE, RESERVED_IPV6_TYPE } from '../inReservedRange'

describe('ipv4InReservedRange', (it) => {
  it('should return type if address is in reserved range', ({ expect }) => {
    expect(ipv4InReservedRange('0.0.0.0')).toBe(RESERVED_IPV4_TYPE.THIS_HOST_ON_THIS_NETWORK)
    expect(ipv4InReservedRange('0.0.0.1')).toBe(RESERVED_IPV4_TYPE.THIS_NETWORK)
    expect(ipv4InReservedRange('10.0.0.0')).toBe(RESERVED_IPV4_TYPE.PRIVATE_USE)
    expect(ipv4InReservedRange('100.64.0.0')).toBe(RESERVED_IPV4_TYPE.SHARED_ADDRESS_SPACE)
    expect(ipv4InReservedRange('127.0.0.0')).toBe(RESERVED_IPV4_TYPE.LOOP_BACK)
    expect(ipv4InReservedRange('169.254.0.0')).toBe(RESERVED_IPV4_TYPE.LINK_LOCAL)
    expect(ipv4InReservedRange('172.16.0.0')).toBe(RESERVED_IPV4_TYPE.PRIVATE_USE_2)
    expect(ipv4InReservedRange('192.0.0.0')).toBe(RESERVED_IPV4_TYPE.IPV4_SERVICE_CONTINUITY_PREFIX)
    expect(ipv4InReservedRange('192.0.0.255')).toBe(RESERVED_IPV4_TYPE.IETF_PROTOCOL_ASSIGNMENTS)
    expect(ipv4InReservedRange('192.0.0.8')).toBe(RESERVED_IPV4_TYPE.IPV4_DUMMY_ADDRESS)
    expect(ipv4InReservedRange('192.0.0.9')).toBe(RESERVED_IPV4_TYPE.PORT_CONTROL_PROTOCOL_ANYCAST)
    expect(ipv4InReservedRange('192.0.0.10')).toBe(RESERVED_IPV4_TYPE.TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST)
    expect(ipv4InReservedRange('192.0.0.170')).toBe(RESERVED_IPV4_TYPE.NAT64_DNS64_DISCOVERY)
    expect(ipv4InReservedRange('192.0.0.171')).toBe(RESERVED_IPV4_TYPE.NAT64_DNS64_DISCOVERY)
    expect(ipv4InReservedRange('192.0.2.0')).toBe(RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_1)
    expect(ipv4InReservedRange('192.31.196.0')).toBe(RESERVED_IPV4_TYPE.AS112_V4)
    expect(ipv4InReservedRange('192.52.193.0')).toBe(RESERVED_IPV4_TYPE.AMT)
    expect(ipv4InReservedRange('192.168.0.0')).toBe(RESERVED_IPV4_TYPE.PRIVATE_USE_3)
    expect(ipv4InReservedRange('192.175.48.0')).toBe(RESERVED_IPV4_TYPE.DIRECT_DELEGATION_AS112_SERVICE)
    expect(ipv4InReservedRange('198.18.0.0')).toBe(RESERVED_IPV4_TYPE.BENCHMARKING)
    expect(ipv4InReservedRange('198.51.100.0')).toBe(RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_2)
    expect(ipv4InReservedRange('203.0.113.0')).toBe(RESERVED_IPV4_TYPE.DOCUMENTATION_TEST_NET_3)
    expect(ipv4InReservedRange('255.255.255.255')).toBe(RESERVED_IPV4_TYPE.LIMITED_BROADCAST)
    expect(ipv4InReservedRange('240.0.0.0')).toBe(RESERVED_IPV4_TYPE.RESERVED)

    expect(ipv4InReservedRange('172.30.0.1')).toBe(RESERVED_IPV4_TYPE.PRIVATE_USE_2)
  })

  it('should return 0 if address is not in reserved range', ({ expect }) => {
    expect(ipv4InReservedRange('192.2.2.1')).toBe(RESERVED_IPV4_TYPE.NONE)
  })
})

describe('ipv6InReservedRange', (it) => {
  it('should return true if address is in reserved range', ({ expect }) => {
    expect(ipv6InReservedRange('::1')).toBe(RESERVED_IPV6_TYPE.LOOPBACK_ADDRESS)
    expect(ipv6InReservedRange('::')).toBe(RESERVED_IPV6_TYPE.UNSPECIFIED_ADDRESS)
    expect(ipv6InReservedRange('::ffff:0:0')).toBe(RESERVED_IPV6_TYPE.IPV4_MAPPED_ADDRESS)
    expect(ipv6InReservedRange('64:ff9b::')).toBe(RESERVED_IPV6_TYPE.IPV4_IPV6_TRANSLAT)
    expect(ipv6InReservedRange('64:ff9b:1::')).toBe(RESERVED_IPV6_TYPE.IPV4_IPV6_TRANSLAT)
    expect(ipv6InReservedRange('100::')).toBe(RESERVED_IPV6_TYPE.DISCARD_ONLY_ADDRESS_BLOCK)
    expect(ipv6InReservedRange('2001::1')).toBe(RESERVED_IPV6_TYPE.TEREDO)
    expect(ipv6InReservedRange('2001:40::')).toBe(RESERVED_IPV6_TYPE.IEFE_PROTOCOL_ASSIGNMENTS)
    expect(ipv6InReservedRange('2001:1::1')).toBe(RESERVED_IPV6_TYPE.PORT_CONTROL_PROTOCOL_ANYCAST)
    expect(ipv6InReservedRange('2001:1::2')).toBe(RESERVED_IPV6_TYPE.TRAVERSAL_USING_RELAYS_AROUND_NAT_ANYCAST)
    expect(ipv6InReservedRange('2001:2::')).toBe(RESERVED_IPV6_TYPE.BENCHMARKING)
    expect(ipv6InReservedRange('2001:3::')).toBe(RESERVED_IPV6_TYPE.AMT)
    expect(ipv6InReservedRange('2001:4:112::')).toBe(RESERVED_IPV6_TYPE.AS112_V6)
    expect(ipv6InReservedRange('2001:20::')).toBe(RESERVED_IPV6_TYPE.ORCHID_V2)
    expect(ipv6InReservedRange('2001:30::')).toBe(RESERVED_IPV6_TYPE.DETS_PREFIX)
    expect(ipv6InReservedRange('2001:db8::')).toBe(RESERVED_IPV6_TYPE.DOCUMENTATION)
    expect(ipv6InReservedRange('2002::')).toBe(RESERVED_IPV6_TYPE.IPV6_TO_IPV4)
    expect(ipv6InReservedRange('2620:4f:8000::')).toBe(RESERVED_IPV6_TYPE.DIRECT_DELEGATION_AS112_SERVICE)
    expect(ipv6InReservedRange('fc00::')).toBe(RESERVED_IPV6_TYPE.UNIQUE_LOCAL)
    expect(ipv6InReservedRange('fe80::')).toBe(RESERVED_IPV6_TYPE.LINK_LOCAL_UNICAST)
  })
})
